package com.FormulaRacers.views;
//importing neccessary classes,packages 

import com.FormulaRacers.algorithms.MergeSort;
import com.FormulaRacers.models.FormulaRacersModel;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SS1
 */
public class FormulaRacers extends javax.swing.JFrame {

    ArrayList<FormulaRacersModel> racersList = new ArrayList<>();//arraylist to store racer's data

    /**
     * Creates new form FormulaRacers
     */
    public FormulaRacers() {
        initComponents();
        loadDataFromTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRacersData = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        txtFieldSearch = new javax.swing.JTextField();
        cmbCategory = new javax.swing.JComboBox<>();
        btnAscending = new javax.swing.JButton();
        btnDescending = new javax.swing.JButton();
        cmbSort = new javax.swing.JComboBox<>();
        btnReset = new javax.swing.JButton();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlMain.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblRacersData.setBackground(new java.awt.Color(0, 0, 0));
        tblRacersData.setForeground(new java.awt.Color(255, 255, 255));
        tblRacersData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(1), "Lewis Hamilton", "Mercedes",  new Integer(387),  new Integer(5),  new Integer(12),  new Integer(5),  new Integer(2), "UK",  new Integer(37)},
                { new Integer(2), "Max Verstappen", "Red Bull Racing",  new Integer(403),  new Integer(9),  new Integer(12),  new Integer(7),  new Integer(3), "Netherlands",  new Integer(24)},
                { new Integer(3), "Valtteri Bottas", "Mercedes",  new Integer(226),  new Integer(0),  new Integer(5),  new Integer(1),  new Integer(2), "Finland",  new Integer(32)},
                { new Integer(4), "Charles Leclerc", "Ferrari",  new Integer(122),  new Integer(2),  new Integer(4),  new Integer(0),  new Integer(3), "Monaco",  new Integer(24)},
                { new Integer(5), "Daniel Ricciardo", "McLarren",  new Integer(115),  new Integer(1),  new Integer(2),  new Integer(1),  new Integer(1), "Australia",  new Integer(32)},
                { new Integer(6), "Sergio Perez", "Red Bull Racing",  new Integer(190),  new Integer(0),  new Integer(2),  new Integer(0),  new Integer(1), "Mexico",  new Integer(31)},
                { new Integer(7), "Lando Norris", "McLaren",  new Integer(160),  new Integer(1),  new Integer(5),  new Integer(0),  new Integer(3), "UK",  new Integer(22)},
                { new Integer(8), "Carlos Sainz", "Ferrari",  new Integer(160),  new Integer(0),  new Integer(3),  new Integer(0),  new Integer(0), "Spain",  new Integer(27)},
                { new Integer(9), "Sebastian Vettel", "Aston Martin",  new Integer(35),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0), "Germany",  new Integer(34)},
                { new Integer(10), "Fernando Alonso", "Alpine",  new Integer(81),  new Integer(0),  new Integer(1),  new Integer(0),  new Integer(1), "Spain",  new Integer(40)},
                { new Integer(11), "Esteban Ocon", "Alpine",  new Integer(76),  new Integer(1),  new Integer(1),  new Integer(0),  new Integer(1), "France",  new Integer(25)},
                { new Integer(12), "George Rusell", "Mercedes",  new Integer(16),  new Integer(0),  new Integer(0),  new Integer(0),  new Integer(0), "UK",  new Integer(24)},
                { new Integer(13), "Pierre Gasly", "Alpha Tauri",  new Integer(110),  new Integer(1),  new Integer(3),  new Integer(0),  new Integer(2), "France",  new Integer(26)}
            },
            new String [] {
                "Sn", "Racer Name", "Team", "Points", "Wins", "Podiums", "Pole Position", "Fastest Laps", "Country", "Age"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRacersData.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblRacersData.setGridColor(new java.awt.Color(0, 0, 0));
        tblRacersData.setOpaque(false);
        tblRacersData.setSelectionBackground(new java.awt.Color(0, 0, 0));
        tblRacersData.setShowVerticalLines(true);
        jScrollPane2.setViewportView(tblRacersData);
        if (tblRacersData.getColumnModel().getColumnCount() > 0) {
            tblRacersData.getColumnModel().getColumn(1).setPreferredWidth(150);
            tblRacersData.getColumnModel().getColumn(2).setPreferredWidth(100);
        }

        pnlMain.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 910, 230));

        btnUpdate.setBackground(new java.awt.Color(0, 0, 0));
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 0, 0));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        pnlMain.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 370, -1, -1));

        btnDelete.setBackground(new java.awt.Color(0, 0, 0));
        btnDelete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 0, 0));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        pnlMain.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 400, -1, -1));

        btnAdd.setBackground(new java.awt.Color(0, 0, 0));
        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 0, 0));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        pnlMain.add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 340, -1, -1));

        btnSearch.setBackground(new java.awt.Color(0, 0, 0));
        btnSearch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 0, 0));
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        pnlMain.add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 310, -1, -1));

        txtFieldSearch.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input Here", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        pnlMain.add(txtFieldSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 270, 120, -1));

        cmbCategory.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cmbCategory.setForeground(new java.awt.Color(255, 0, 0));
        cmbCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Racer Name", "Team", "Points", "Wins", "Podiums", "Pole Position", "Fastest Laps", "Country", "Age" }));
        cmbCategory.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Category", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        pnlMain.add(cmbCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 220, -1, -1));

        btnAscending.setBackground(new java.awt.Color(0, 0, 0));
        btnAscending.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAscending.setForeground(new java.awt.Color(255, 0, 0));
        btnAscending.setText("Ascending");
        btnAscending.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sort By", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        btnAscending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAscendingActionPerformed(evt);
            }
        });
        pnlMain.add(btnAscending, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 170, 90, -1));

        btnDescending.setBackground(new java.awt.Color(0, 0, 0));
        btnDescending.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDescending.setForeground(new java.awt.Color(255, 0, 0));
        btnDescending.setText("Descending");
        btnDescending.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sort By", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        btnDescending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDescendingActionPerformed(evt);
            }
        });
        pnlMain.add(btnDescending, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 170, 90, -1));

        cmbSort.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cmbSort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SN", "Racer Name", "Team", "Points", "Wins", "Podium", "Pole Position", "Fastest Laps", "Country", "Age" }));
        cmbSort.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sort", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        pnlMain.add(cmbSort, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 170, -1, -1));

        btnReset.setBackground(new java.awt.Color(0, 0, 0));
        btnReset.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnReset.setForeground(new java.awt.Color(255, 0, 0));
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        pnlMain.add(btnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, -1, -1));

        lblBackground.setIcon(new javax.swing.ImageIcon("C:\\Users\\Dell\\Downloads\\java.png")); // NOI18N
        pnlMain.add(lblBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1060, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        //UI for Add button
        JPanel titleADDPanel = new JPanel();
        titleADDPanel.setBackground(Color.BLACK);
        JLabel titleADDLabel = new JLabel("Add more Racers");
        titleADDLabel.setFont(new Font("Calibri", Font.BOLD, 20));
        titleADDLabel.setForeground(Color.WHITE);
        titleADDPanel.add(titleADDLabel);

        //UI for Add button
        JPanel inputPanel = new JPanel(new GridLayout(0, 2));
        inputPanel.setBackground(new Color(255, 0, 0));  // Set the background color
        inputPanel.setBorder(new EmptyBorder(10, 10, 10, 10));  // Add padding to create space

        //UI for Add button
        inputPanel.add(new JLabel("S.N.:"));
        JTextField snField = new JTextField();
        inputPanel.add(snField);
        inputPanel.add(new JLabel("Racer Name:"));
        JTextField racersNameField = new JTextField();
        inputPanel.add(racersNameField);
        inputPanel.add(new JLabel("Team:"));
        JTextField teamField = new JTextField();
        inputPanel.add(teamField);
        inputPanel.add(new JLabel("Points:"));
        JTextField pointsField = new JTextField();
        inputPanel.add(pointsField);
        inputPanel.add(new JLabel("Wins:"));
        JTextField winsField = new JTextField();
        inputPanel.add(winsField);
        inputPanel.add(new JLabel("Podium:"));
        JTextField podiumField = new JTextField();
        inputPanel.add(podiumField);
        inputPanel.add(new JLabel("Pole Position:"));
        JTextField polePositionField = new JTextField();
        inputPanel.add(polePositionField);
        inputPanel.add(new JLabel("Fastest Lap:"));
        JTextField fastestLapField = new JTextField();
        inputPanel.add(fastestLapField);
        inputPanel.add(new JLabel("country:"));
        JTextField countryField = new JTextField();
        inputPanel.add(countryField);
        inputPanel.add(new JLabel("Age:"));
        JTextField ageField = new JTextField();
        inputPanel.add(ageField);
        JButton btnClear = new JButton();
        inputPanel.add(btnClear);
        btnClear.setBackground(Color.BLACK);
        btnClear.setAlignmentX(RIGHT_ALIGNMENT);
        btnClear.setText("Clear");
        btnClear.setForeground(Color.WHITE);
        btnClear.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {

                snField.setText("");
                racersNameField.setText("");
                teamField.setText("");
                pointsField.setText("");
                winsField.setText("");
                podiumField.setText("");
                polePositionField.setText("");
                fastestLapField.setText("");
                countryField.setText("");
                ageField.setText("");
            }
        });

        //UI for Add button
        JPanel parentPanel = new JPanel(new BorderLayout());
        parentPanel.add(titleADDPanel, BorderLayout.NORTH);
        parentPanel.add(inputPanel, BorderLayout.CENTER);

        int option = JOptionPane.showConfirmDialog(
                this,
                parentPanel,
                "More Racers",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE
        );

        if (option == JOptionPane.OK_OPTION) { //validating if user presses OK button
            //text field in add's UI are stored in new variables
            String sn = snField.getText();
            String racersName = racersNameField.getText();
            String teamName = teamField.getText();
            String country = countryField.getText();
            //validation
            if (sn == null || sn.isEmpty()) {
                JOptionPane.showMessageDialog(this, "S.N. is empty.");
                return;
            }
            if (snOrNameExist(sn, null)) {
                JOptionPane.showMessageDialog(this, "S.N. must be unique.");
                return;
            }
            if (racersName == null || racersName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Name is empty.");
                return;
            }
            if (snOrNameExist(null, racersName)) {
                JOptionPane.showMessageDialog(this, "Name must be unique.");
                return;
            }
            if (teamField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Team is empty.");
                return;
            }
            if (pointsField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Points is empty.");
                return;
            }
            if (winsField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Wins is empty.");
                return;
            }
            if (podiumField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Podium is empty.");
                return;
            }
            if (polePositionField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Pole Position is empty.");
                return;
            }
            if (fastestLapField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "FastestLap is empty.");
                return;
            }
            if (countryField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "country is empty.");
                return;
            }
            if (ageField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Age is empty.");
                return;
            }
            if (!checkIfString(teamName)) {
                JOptionPane.showMessageDialog(this, "'Team' must be alphabetical.");
                return;
            }

            if (!checkIfString(country)) {
                JOptionPane.showMessageDialog(this, "'country' must be alphabetical.");
                return;
            }
            if (!checkIfString(racersName)) {
                JOptionPane.showMessageDialog(this, "'Racer's Name' must be alphabetical.");
                return;
            }

            if (!isInteger(snField.getText()) || !isInteger(pointsField.getText()) || !isInteger(winsField.getText())
                    || !isInteger(podiumField.getText()) || !isInteger(polePositionField.getText())
                    || !isInteger(fastestLapField.getText()) || !isInteger(ageField.getText())) {
                JOptionPane.showMessageDialog(this, "Please enter valid whole numbers in numeric fields.");
                return;
            }

            // Create a new-Racer object with the input data
            FormulaRacersModel newRacer = new FormulaRacersModel(
                    Integer.parseInt(sn),
                    racersNameField.getText(),
                    teamField.getText(),
                    Integer.parseInt(pointsField.getText()),
                    Integer.parseInt(winsField.getText()),
                    Integer.parseInt(podiumField.getText()),
                    Integer.parseInt(polePositionField.getText()),
                    Integer.parseInt(fastestLapField.getText()),
                    countryField.getText(),
                    Integer.parseInt(ageField.getText())
            );

            // Add the new Racer object to the list and table
            racersList.add(newRacer);
            addFormulaRacerModelToTable(newRacer);

            JOptionPane.showMessageDialog(this, "Racer added successfully!");
        }

    }

    private static boolean checkIfString(String str) {
        //method to check if any string is null or has space in between
        if (str == null || str.isEmpty()) {
            return false;
        }

        for (char c : str.toCharArray()) {
            if (!Character.isLetter(c) && !Character.isWhitespace(c)) {
                return false;
            }
        }

        return true;
    }

    private static boolean isInteger(String str) {
        //method to check if string is a valid integer
        if (str == null || str.trim().isEmpty()) {
            return false;
        }

        try {
            Integer.valueOf(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private boolean snOrNameExist(String sn, String racersName) {
        //if either of racer with same sn or racer with same name is found,true is returned
        //returns false if nothing is found
        for (FormulaRacersModel Racer : racersList) {
            if (sn != null && sn.equals(String.valueOf(Racer.getSN()))) {
                return true;
            } else if (racersName != null && racersName.equals(Racer.getRacerName())) {
                return true;
            }
        }
        return false;
    }

    private void addFormulaRacerModelToTable(FormulaRacersModel Racers) {
        DefaultTableModel model = (DefaultTableModel) tblRacersData.getModel();//getting value from table
        model.addRow(new Object[]{ //adding row to existing table
            Racers.getSN(),
            Racers.getRacerName(),
            Racers.getTeam(),
            Racers.getPoints(),
            Racers.getWins(),
            Racers.getPodium(),
            Racers.getPolePosition(),
            Racers.getFastestLap(),
            Racers.getCountry(),
            Racers.getAge()
        });

    }

    private int columnIndexByName(String columnName) {
        DefaultTableModel model = (DefaultTableModel) tblRacersData.getModel();//getting value from table
        for (int i = 0; i < model.getColumnCount(); i++) {
            if (model.getColumnName(i).equalsIgnoreCase(columnName)) {//checks if column name from table and string column name are same
                return i;
            }
        }
        return -1; // returns -1 if column not found
    }

    private void loadDataFromTable() {
        try { //trying to catch a exception
            DefaultTableModel tableModel = (DefaultTableModel) tblRacersData.getModel();        //getting value from table
            int rowCount = tableModel.getRowCount();

            racersList.clear(); // Clear existing data

            for (int i = 0; i < rowCount; i++) {

                //getting value from table,storing in varialbe and converting to integer value(only for int values)
                String snSTRING = tableModel.getValueAt(i, 0).toString();
                int sn = Integer.parseInt(snSTRING);

                String racerName = tableModel.getValueAt(i, 1).toString();
                String teamName = tableModel.getValueAt(i, 2).toString();

                String pointsSTRING = tableModel.getValueAt(i, 3).toString();
                int points = Integer.parseInt(pointsSTRING);

                String winsSTRING = tableModel.getValueAt(i, 4).toString();
                int wins = Integer.parseInt(winsSTRING);

                String podiumSTRING = tableModel.getValueAt(i, 5).toString();
                int podium = Integer.parseInt(podiumSTRING);

                String polePositionSTRING = tableModel.getValueAt(i, 6).toString();
                int polePosition = Integer.parseInt(polePositionSTRING);

                String fastestLapSTRING = tableModel.getValueAt(i, 7).toString();
                int fastestLap = Integer.parseInt(fastestLapSTRING);

                String country = tableModel.getValueAt(i, 8).toString();

                String ageSTRING = tableModel.getValueAt(i, 9).toString();
                int age = Integer.parseInt(ageSTRING);

                //adding varialbes in FormulaRacersModel and in arraylist
                racersList.add(new FormulaRacersModel(sn, racerName, teamName, points, wins, podium, polePosition, fastestLap, country, age));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private int racerRowIndex(String sn, String racerName) {
        for (int i = 0; i < racersList.size(); i++) {
            FormulaRacersModel racersData = racersList.get(i);//getting index from arraylist 'racerlist' and assigned to racersData
            //checks if sn is equal to SN of racersData &     if racerName is equal to RacerName in racersData
            if (sn.equals(String.valueOf(racersData.getSN())) && racerName.equals(racersData.getRacerName())) {
                //if both condition is true,method returns i
                return i;
            }

        }
        return -1; // //if either condition is false ,method returns -1
    }

    private boolean Numeric(String str) {
        //converting str to integer
        try {
            Integer.valueOf(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private void sortRacerData(boolean ascending) {
        DefaultTableModel model = (DefaultTableModel) tblRacersData.getModel();
        int sortColumn = cmbSort.getSelectedIndex();

        if (sortColumn >= 0) {
            int rowCount = model.getRowCount();
            Object[][] rowData = new Object[rowCount][model.getColumnCount()];

            // Extract the entire row data
            for (int i = 0; i < rowCount; i++) {
                for (int j = 0; j < model.getColumnCount(); j++) {
                    Object value = model.getValueAt(i, j);

                    // Convert string values to Double if the data is numeric
                    if (value instanceof String && Numeric((String) value)) {
                        rowData[i][j] = Integer.valueOf((String) value);
                    } else {
                        rowData[i][j] = value;
                    }
                }
            }

            // Use MergeSort to sort the entire row data based on the selected column
            MergeSort.mergeSort(rowData, 0, rowCount - 1, sortColumn, ascending);

            // Clear the table before updating with sorted data
            model.setRowCount(0);

            // Update the table with the sorted data
            for (int i = 0; i < rowCount; i++) {
                model.addRow(rowData[i]);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        // Create and display the form
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormulaRacers().setVisible(true);
            }

        });


    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        //UI for Update's UI
        JPanel titleUpdatePanel = new JPanel();
        JLabel titleUpdateLabel = new JLabel("Update Racers");
        titleUpdateLabel.setFont(new Font("Calibri", Font.BOLD, 20));
        titleUpdateLabel.setForeground(Color.WHITE);
        titleUpdatePanel.setBackground(Color.BLACK);
        titleUpdatePanel.add(titleUpdateLabel);

        //UI for Update's UI
        JPanel inputPanel = new JPanel(new GridLayout(0, 2));
        inputPanel.setBackground(new Color(255, 0, 0));
        inputPanel.setBorder(new EmptyBorder(10, 10, 10, 10));

        //UI for Update's UI
        inputPanel.add(new JLabel("S.N.:"));
        JTextField snField = new JTextField();
        inputPanel.add(snField);
        inputPanel.add(new JLabel("Racer Name:"));
        JTextField racerNameField = new JTextField();
        inputPanel.add(racerNameField);
        inputPanel.add(new JLabel("Column to Update:"));
        JTextField updatingColumnField = new JTextField();
        inputPanel.add(updatingColumnField);
        inputPanel.add(new JLabel("New Value:"));
        JTextField newValueField = new JTextField();
        inputPanel.add(newValueField);
        JButton btnClear = new JButton();
        inputPanel.add(btnClear);
        btnClear.setBackground(Color.BLACK);
        btnClear.setAlignmentX(RIGHT_ALIGNMENT);
        btnClear.setText("Clear");
        btnClear.setForeground(Color.WHITE);
        btnClear.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {

                snField.setText("");
                racerNameField.setText("");
                updatingColumnField.setText("");
                newValueField.setText("");
            }
        });

        //UI for Update's UI
        JPanel parentPanel = new JPanel(new BorderLayout());
        parentPanel.add(titleUpdatePanel, BorderLayout.NORTH);
        parentPanel.add(inputPanel, BorderLayout.CENTER);

        int option = JOptionPane.showConfirmDialog(
                this,
                parentPanel,
                "Update Data",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE
        );

        if (option == JOptionPane.OK_OPTION) {//validating if user presses OK button
            //text field in update's UI are stored in new variables)
            String sn = snField.getText().trim();
            String racerName = racerNameField.getText().trim();
            String columnToUpdate = updatingColumnField.getText().trim();
            String newValue = newValueField.getText();
            //validation
            if (sn.isEmpty() || racerName.isEmpty() || columnToUpdate.isEmpty() || newValue.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all fields.");
                return;
            }

            // getting row index based using racerRowIndex
            int rowIndexToUpdate = racerRowIndex(sn, racerName);

            if (rowIndexToUpdate != -1) {

                DefaultTableModel model = (DefaultTableModel) tblRacersData.getModel(); // getting value from table
                int columnIndex = columnIndexByName(columnToUpdate);              //getting which column user want to update using columnIndexByName method

                if (columnIndex != -1) {
                    //updating
                    model.setValueAt(newValue, rowIndexToUpdate, columnIndex);

                    loadDataFromTable();  // Update the racerList data  

                    JOptionPane.showMessageDialog(this, "Racer Data updated successfully!");
                } else {
                    JOptionPane.showMessageDialog(this, "Invalid column to update.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Racer Data not found. Update was unsucessfull.");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        //UI for Delete's UI
        JPanel titleDeletePanel = new JPanel();
        JLabel titleDeleteLabel = new JLabel("Delete a Racers data");
        titleDeleteLabel.setFont(new Font("Calibri", Font.BOLD, 20));
        titleDeletePanel.add(titleDeleteLabel);
        titleDeleteLabel.setForeground(Color.WHITE);
        titleDeletePanel.setBackground(Color.BLACK);

        //UI for Delete's UI
        JPanel inputPanel = new JPanel(new GridLayout());
        inputPanel.setBackground(new Color(255, 0, 0));
        inputPanel.setBorder(new EmptyBorder(10, 10, 10, 10));

        //UI for Delete's UI
        inputPanel.add(new JLabel("SN:"));
        JTextField snField = new JTextField();
        inputPanel.add(snField);
        inputPanel.add(new JLabel("Racer's Name:"));
        JTextField racerNameField = new JTextField();
        inputPanel.add(racerNameField);
        JButton btnClear = new JButton();
        inputPanel.add(btnClear);
        btnClear.setBackground(Color.BLACK);
        btnClear.setAlignmentX(RIGHT_ALIGNMENT);
        btnClear.setText("Clear");
        btnClear.setForeground(Color.WHITE);
        btnClear.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {

                snField.setText("");
                racerNameField.setText("");
            }
        });

        //UI for Delete's UI
        JPanel parentPanel = new JPanel(new BorderLayout());
        parentPanel.add(titleDeletePanel, BorderLayout.NORTH);
        parentPanel.add(inputPanel, BorderLayout.CENTER);

        //UI for Delete's UI
        int option = JOptionPane.showConfirmDialog(
                this,
                parentPanel,
                "Delete a a Racer", // Updated title
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE
        );

        if (option == JOptionPane.OK_OPTION) {  //if user presses ok button
            //getting text from UI and storing it in variables
            String snToDelete = snField.getText();
            String racerNameToDelete = racerNameField.getText();

            // getting racer row index using sn and name and assigning it to rowIndexToDelete method
            int rowIndexToDelete = racerRowIndex(snToDelete, racerNameToDelete);

            if (rowIndexToDelete != -1) {
                // Confirmation
                int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this racer?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

                if (confirmation == JOptionPane.YES_OPTION) {
                    // Deleting
                    DefaultTableModel model = (DefaultTableModel) tblRacersData.getModel(); // getting value from table
                    model.removeRow(rowIndexToDelete);                                       //method to remove row

                    // Update the racerList data
                    loadDataFromTable();

                    JOptionPane.showMessageDialog(this, "A racer's data was successfully deleted!");
                } else {
                    JOptionPane.showMessageDialog(this, "Deleting process failed.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Racer's data were not accurate. Please try again.");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String searchCategory = cmbCategory.getSelectedItem().toString();  //getting value from combobox and storing in variable
        String searchValue = txtFieldSearch.getText();                     //getting text from textfield and storing in variable

        if (searchValue.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter a value!");
            return;
        }
        // getting column row index using searchCategory and assigning it to IndexColumn method
        int indexColumn = columnIndexByName(searchCategory);

        if (indexColumn != -1) {
            DefaultTableModel model = (DefaultTableModel) tblRacersData.getModel();     // getting value from table
            int RowCount = model.getRowCount();                                         //getting row count from talbe and store in ROwCount variable
            ArrayList<String[]> resultRows = new ArrayList<>();                         //new arratlist name resultRows

            // Get column names
            String[] columnNames = new String[model.getColumnCount()];
            for (int j = 0; j < columnNames.length; j++) {
                columnNames[j] = model.getColumnName(j);
            }

            for (int i = 0; i < RowCount; i++) {
                String cellValue = model.getValueAt(i, indexColumn).toString();
                int compareResult;

                // Check if the column is a numeric column 
                if (indexColumn == 4 || indexColumn == 5) {
                    int cellValueInt = Integer.parseInt(cellValue);
                    int searchValueInt = Integer.parseInt(searchValue);
                    compareResult = Integer.compare(cellValueInt, searchValueInt);
                } else {
                    compareResult = cellValue.compareTo(searchValue);
                }

                if (compareResult == 0) {
                    // Add the found row to the list
                    String[] row = new String[model.getColumnCount()];
                    for (int j = 0; j < row.length; j++) {
                        row[j] = columnNames[j] + "-> " + model.getValueAt(i, j).toString();
                        System.out.println("\n");
                    }
                    resultRows.add(row);
                }
            }

            if (!resultRows.isEmpty()) {
                // Display the found rows 
                StringBuilder message = new StringBuilder("Racer's data found in the following rows:\n");
                System.out.println("\n");

                for (String[] row : resultRows) {
                    for (String cell : row) {
                        message.append("\t\t").append(cell).append("   ").append("\t\t");
                    }
                    message.append("\n\n");
                }
                JOptionPane.showMessageDialog(this, message.toString());
            } else {
                JOptionPane.showMessageDialog(this, "Racer's data not found.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid search category.");
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnAscendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAscendingActionPerformed
        //calls sortRacerData which initially is true
        sortRacerData(true);
    }//GEN-LAST:event_btnAscendingActionPerformed

    private void btnDescendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDescendingActionPerformed
        //calls sortRacerData which initially is true but is false after called and hence resulting in descending sort
        sortRacerData(false);
    }//GEN-LAST:event_btnDescendingActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "This will remove any changes made to the table!", "Reset", JOptionPane.INFORMATION_MESSAGE);
        int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to reset?", "Confirmation", JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.YES_OPTION) {
            // User clicked "Yes", proceed with reset
            SwingUtilities.invokeLater(() -> {
                resetTableData();
            });
        } else {
            // User clicked "No" or closed the dialog, do nothing
        }

    }

    private void resetTableData() {
        DefaultTableModel model = (DefaultTableModel) tblRacersData.getModel(); // gets data from table
        int rowCount = model.getRowCount();                                     // getting row count from table

// Backup the initial state of the table
        Object[][] initialData = new Object[rowCount][model.getColumnCount()];
        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < model.getColumnCount(); j++) {
                initialData[i][j] = model.getValueAt(i, j);
                System.out.println(initialData[i][j]);
            }
        }

// Remove newly added rows and revert updates
        for (int i = rowCount - 1; i >= 0; i--) {
            Object snValue = model.getValueAt(i, 0);
            String racerName = model.getValueAt(i, 1).toString();

            if (snValue == null || snValue.toString().isEmpty() || snOrNameExist(snValue.toString(), null)) {
                // Remove the row if it was newly added
                model.removeRow(i);
            } else {
                // Revert any updates made to the row
                for (int j = 0; j < model.getColumnCount(); j++) {
                    model.setValueAt(initialData[i][j], i, j);
                }
            }
        }

// Ensure the table is visible after modifications
        tblRacersData.revalidate();
        tblRacersData.repaint();
    }//GEN-LAST:event_btnResetActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAscending;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDescending;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbCategory;
    private javax.swing.JComboBox<String> cmbSort;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JTable tblRacersData;
    private javax.swing.JTextField txtFieldSearch;
    // End of variables declaration//GEN-END:variables
}
